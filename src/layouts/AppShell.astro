---
import "../styles/global.css";
import Sidebar from "../components/Sidebar.tsx";
---

<!doctype html>
<html lang="en" class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"/>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>LocalGPT</title>
    <!-- Dark-mode bootstrap (no flash) -->
    <script is:inline>
      (function(){ try { document.documentElement.classList.add('dark'); } catch {} })();
    </script>
<style>
  input, select, textarea { font-size: 16px; }
  /* Avoid “smart” text resizing that can look like zoom: */
  html { -webkit-text-size-adjust: 100%; text-size-adjust: 100%; }
</style>
    <style is:inline>
      @media (min-width: 768px) {
        .appgrid { grid-template-columns: 280px 1fr; }
        .appgrid.is-collapsed { grid-template-columns: 0 1fr; }
        .appgrid.is-collapsed aside { border-right-width: 0; }
      }
    </style>
  </head>

  <body class="h-full bg-zinc-900 text-zinc-100">
    <!-- App grid -->
    <div id="appgrid" class="appgrid h-[100dvh] w-full grid grid-cols-1 transition-[grid-template-columns] duration-200 ease-in-out">

      <!-- Sidebar -->
      <aside id="sidebar"
        class="hidden md:flex flex-col border-r border-zinc-800 bg-zinc-900/40 overflow-y-auto transition-all duration-200 ease-in-out">
        <div class="h-14 border-b border-zinc-800"></div>
        <div class="flex-1 overflow-y-auto">
          <Sidebar client:load onSelect={(id) => { window.dispatchEvent(new CustomEvent('open-conversation', { detail: { id } })); }} />
        </div>
      </aside>

      <!-- Main column -->
      <main class="flex flex-col min-h-0">

        <!-- Top bar -->
        <header class="h-16 shrink-0 border-b border-zinc-800 bg-zinc-900/50 backdrop-blur px-4 md:px-6 flex items-center justify-between relative">
          <!-- left: sidebar toggle only -->
          <div class="flex items-center gap-2">
            <button
              id="toggle-sidebar"
              type="button"
              class="px-2 py-1 text-sm rounded-md border border-zinc-700 bg-zinc-800 hover:bg-zinc-700"
              title="Toggle sidebar"
            >☰</button>
          </div>

          <!-- center: conversation/app title (clickable toggler) -->
          <div class="absolute left-1/2 -translate-x-1/2">
            <button
              id="model-menu-toggle"
              type="button"
              class="text-sm text-zinc-300 inline-flex group items-center gap-1 px-2 py-1 rounded-md hover:bg-zinc-800/60 border border-transparent hover:border-zinc-700 cursor-pointer"
              title="Model & reasoning"
              aria-haspopup="dialog"
              aria-expanded="false"
            >
              <span id="model-label">ChatGPT 5</span>
              <svg class="inline-block h-4 w-4 md:h-5 md:w-5 shrink-0 text-zinc-400 transition-transform group-[aria-expanded='true']:rotate-180" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                <path d="m6 9 6 6 6-6" />
              </svg>
            </button>
          </div>

          <!-- right: compact new chat button (desktop), empty on mobile -->
          <div class="flex items-center gap-2">
            <button
              id="new-chat-global"
              type="button"
              class="hidden md:inline-flex h-8 w-8 items-center justify-center rounded-md border border-zinc-700 bg-zinc-800 hover:bg-zinc-700"
              title="New chat"
            >+
            </button>
          </div>
        </header>

        <!-- Content -->
        <section class="flex-1 min-h-0 p-3 md:p-6 overflow-hidden">
          <slot />
        </section>
      </main>
      <!-- Mobile sidebar drawer -->
<div id="drawer-backdrop" class="md:hidden fixed inset-0 bg-black/40 backdrop-blur-sm hidden z-40"></div>
<aside id="drawer"
  class="md:hidden fixed left-0 top-0 h-[100dvh] w-80 max-w-[85vw] -translate-x-full bg-zinc-900 border-r border-zinc-800 transition-transform duration-200 ease-out overflow-y-auto z-50"
  style="padding-bottom: env(safe-area-inset-bottom)">
  <div class="h-12 border-b border-zinc-800 flex items-center px-3">
    <div class="text-sm text-zinc-300">Conversations</div>
    <button id="drawer-close" class="ml-auto rounded px-2 py-1 border border-zinc-700 text-sm">Close</button>
  </div>
  <div class="p-2">
    <!-- Reuse the same sidebar component -->
    <div class="flex-1">
      <Sidebar client:load onSelect={(id) => { window.dispatchEvent(new CustomEvent('open-conversation', { detail: { id } })); }} />
    </div>
  </div>
</aside>
    </div>

    <!-- Behavior: theme + sidebar collapse (persisted) -->
   <script is:inline>
    (function () {
      // Desktop sidebar collapse (md+)
      const grid = document.getElementById('appgrid');
      const deskBtn = document.getElementById('toggle-sidebar');
      const KEY = 'sidebar-collapsed';
      function applyCollapsed(c){ grid?.classList.toggle('is-collapsed', !!c); }
      let collapsed = false;
      try { collapsed = localStorage.getItem(KEY) === '1'; } catch {}
      applyCollapsed(collapsed);

      // Mobile drawer elements
      const drawer = document.getElementById('drawer');
      const backdrop = document.getElementById('drawer-backdrop');
      const closeBtn = document.getElementById('drawer-close');

      function openDrawer(){ drawer?.classList.remove('-translate-x-full'); backdrop?.classList.remove('hidden'); document.body.style.overflow = 'hidden'; }
      function closeDrawer(){ drawer?.classList.add('-translate-x-full'); backdrop?.classList.add('hidden'); document.body.style.overflow = ''; }

      // Toggle button handles desktop collapse or opens drawer on mobile
      deskBtn?.addEventListener('click', () => {
        const isMobile = window.matchMedia('(max-width: 767px)').matches;
        if (isMobile) return openDrawer();
        collapsed = !collapsed; applyCollapsed(collapsed);
        try { localStorage.setItem(KEY, collapsed ? '1' : '0'); } catch {}
      });

      backdrop?.addEventListener('click', closeDrawer);
      closeBtn?.addEventListener('click', closeDrawer);

      // Global New button beside title
      const newBtn = document.getElementById('new-chat-global');
      newBtn?.addEventListener('click', async () => {
        try {
          const model = localStorage.getItem('model') || 'gpt-5-2025-08-07';
          const res = await fetch('/.netlify/functions/conversations', {
            method: 'POST', headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ title: 'New chat', model })
          });
          const data = await res.json().catch(() => ({}));
          const id = data?.id;
          if (id) {
            localStorage.setItem('conversationId', id);
            window.dispatchEvent(new CustomEvent('open-conversation', { detail: { id } }));
            window.dispatchEvent(new CustomEvent('conversations-updated'));
            closeDrawer();
          }
        } catch (e) { console.error('new chat failed', e); }
      });

      // Close drawer after selecting a conversation
      window.addEventListener('open-conversation', () => closeDrawer());
    })();

    // Update the model label from event payload (if present) or localStorage
    function updateModelLabel(e) {
      // Prefer event detail if provided
      const fromEvent = e && e.detail ? e.detail : null;
      let model = (fromEvent && (fromEvent.id || fromEvent.model)) || localStorage.getItem('model') || 'gpt-5';
      let label = fromEvent && fromEvent.label ? fromEvent.label : model;

      if (!fromEvent || !fromEvent.label) {
        if (model.startsWith('gpt-5')) label = 'ChatGPT 5';
        else if (model.startsWith('gpt-4.1')) label = 'GPT 4.1';
        else if (model.startsWith('gpt-5-nano')) label = 'GPT-5 nano';
      }

      const el = document.getElementById('model-label');
      if (el) el.textContent = label;

      const reasoningSection = document.getElementById('reasoning-section');
      if (reasoningSection) {
        if (model.startsWith('gpt-5')) reasoningSection.style.display = '';
        else reasoningSection.style.display = 'none';
      }
    }

    function setModel(model) {
      try {
        localStorage.setItem('model', model);
      } catch (e) { console.error('failed to save model', e); }

      // Derive a pretty label (keep in sync with updateModelLabel fallback)
      let label = model;
      if (model.startsWith('gpt-5')) label = 'ChatGPT 5';
      else if (model.startsWith('gpt-4.1')) label = 'GPT 4.1';
      else if (model.startsWith('gpt-5-nano')) label = 'GPT-5 nano';

      // Update immediately
      updateModelLabel({ detail: { id: model, label } });

      // Notify other components (and keep schema in sync with Chat.tsx)
      window.dispatchEvent(new CustomEvent('model-changed', { detail: { id: model, label } }));
    }
    updateModelLabel();
    window.addEventListener('storage', updateModelLabel);
    window.addEventListener('model-changed', updateModelLabel);
  </script>
  </body>
</html>
